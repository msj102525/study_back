plugins {
    id 'java' // java 플러그인 적용함, 기본 자바 컴파일과 패키지 작업을 지원함
    id 'war' // 자바 패키징 종류 지정
    id 'org.springframework.boot' version '3.2.5'   // 스프링부트 플러그인 적용하고, 사용 버전 지정함. 기본 설정을 자동화
    id 'io.spring.dependency-management' version '1.1.4'    // 스프링 의존성 관리 플러그인 적용함. 의존성 관리를 쉽게 하기 위한 플러그인
}

group = 'org.ict'   // 프로젝트의 그룹 ID 설정, 도메인명을 거꾸로 작성한 것처럼 지정
version = '0.0.1-SNAPSHOT'  // 이 프로젝트 버전을 설정, SNAPSHOT은 개발중인 버전을 의미함

java {
    sourceCompatibility = '17'  // 소스 코드 호환성을 위한 자바 버전 설정함
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor     // annotationProcessor 구성을 compileOnly 에 확장함. 컴파일시에만 필요한 의존성을 설정함
    }
}

repositories {
    mavenCentral()  //  메이븐 Central 저장소를 사용해서 의존성을 해결함
}

// 스프링 부트와 관련된 스타터 및 기타 라이브러리 의존성을 정의함
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'  // 스프링 데이터 jpa 관련 기본 설정과 의존성 제공
    implementation 'org.springframework.boot:spring-boot-starter-security'  // 스프링 시큐리티 관련 기본 설정과 의존성 제공
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // view 파일 작성영 템플릿
    implementation 'org.springframework.boot:spring-boot-starter-validation'    // 데이터이 유효성 검사용 어노테이션 제공
    implementation 'org.springframework.boot:spring-boot-starter-web'   // 스프링 웹 관련 기본 설정과 의존성 제공
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'  // 뷰파일 관련된 템플릿 관련 시큐리티 라이브러리
    compileOnly 'org.projectlombok:lombok'  // 롬복 라이브러리는 컴파일 시에만 의존성 추가됨, 자동으로 getter, setter, contructor 등을 생성해 줌
    developmentOnly 'org.springframework.boot:spring-boot-devtools' // 개발시 유용한 도구(예: 자동 리스타트)를 제공하는 라이브러리임
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'   // 오라클 데이터베이스용 jdbc 드라이버
    annotationProcessor 'org.projectlombok:lombok'  // 롬복을 어노테이션 방식으로 처리하는 라이브러리
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'   // 스프링부트에 포함된 톰켓 라이브러리임
    testImplementation 'org.springframework.boot:spring-boot-starter-test'  // 테스트를 위한 라이브러리
    testImplementation 'org.springframework.security:spring-security-test'  // 스프링 시큐리티 테스트를 위한 스타터 추가함

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // jwt 관련
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'    // JWT 를 생성하고 검증하기 위한 라이브러리임
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'   // JWT 구현체를 런타임시 의존성 추가하는 라이브러리
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'    // JSON 처리를 위한 Jackson 과 연동되는 JJWT 의존성을 런타임시 추가함
}

//sourceSets
//gradle build 시 QClass 소스도 함께 build 하기 위해서 sourceSets 에 해당 위치를 추가해준다.
def querydslSrcDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDirs += [ querydslSrcDir ]
        }
    }
}

//해당 내용을 명시해주지 않으면 Q 파일 내 Generated 를 import 할 때
// 자바 9 에만 있는 import javax.annotation.processing.Generated 로 import 해준다.
//그렇기 때문에 다른 버전에서도 사용할 수 있도록 java.annotation.Generated 로 import 하도록 설정하는 코드
compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

//annotationProcessorGeneratedSourcesDirectory 를 사용할 수도 있는데,
//Gradle 공식 문서에 해당 기능은 deprecated 되었고, 추후 major version 에선 삭제할 것이라고 소개하고 있기 때문에
// generatedSourceOutputDirectory 를 사용한다.
//generatedSourceOutputDirectory 는 annotation processors 에서 생성한 소스 파일을 저장할 디렉토리를 지정 해준다.
// (Gradle 공식문서 → CompileOptions - Gradle DSL Version 7.5.1 )
//이 코드를 통해 위에서 선언한 querydslSrcDir 변수의 src/main/generated 에다가 annotation processors 가 만든 QClass 들을 저장해준다.
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

//build clean 시에 생성되었던 QClass 를 모두 삭제 (querydslSrcDir = src/main/generated)
//만들어진 QClass 삭제하기 : Gradle > build > clean
//QClass 만들기 : Gradle > build > compileJava
//src > main > generated 내에 Q 클래스가 만들어졌으면 queryDSL 설정이 정상적으로 된 것이다
clean {
    delete file(querydslSrcDir)
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()  // 테스트 코드를 실행할 때 JUnit 플랫폼을 사용하도록 설정한 것임
}
