/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-28 06:47:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.testapi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class unicast_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>webSocket : unicast</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	#messageWindow {\r\n");
      out.write("		background: LightSkyBlue;\r\n");
      out.write("		height: 300px;\r\n");
      out.write("		overflow: auto;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.chat_content {\r\n");
      out.write("		background: rgb(255, 255, 102);\r\n");
      out.write("		padding: 10px;\r\n");
      out.write("		border-radius: 10px;\r\n");
      out.write("		display: inline-block;\r\n");
      out.write("		position: relative;\r\n");
      out.write("		margin: 10px;\r\n");
      out.write("		float: right;\r\n");
      out.write("		clear: both;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.chat_content:after {\r\n");
      out.write("		content: '';\r\n");
      out.write("		positon: absolute;\r\n");
      out.write("		right: 0;\r\n");
      out.write("		top: 50%;\r\n");
      out.write("		width: 0;\r\n");
      out.write("		height: 0;\r\n");
      out.write("		border: 20px solid transparent;\r\n");
      out.write("		border-left-color: rgb(255, 255, 102);\r\n");
      out.write("		border-right: 0;\r\n");
      out.write("		border-top: 0;\r\n");
      out.write("		margin-top: -3.5px;\r\n");
      out.write("		margin-right: -10px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.other-side {\r\n");
      out.write("		background: white;\r\n");
      out.write("		float: left;\r\n");
      out.write("		clear: both;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.other-side:after {\r\n");
      out.write("		content: '';\r\n");
      out.write("		positon: absolute;\r\n");
      out.write("		right: 0;\r\n");
      out.write("		top: 50%;\r\n");
      out.write("		width: 0;\r\n");
      out.write("		height: 0;\r\n");
      out.write("		border: 20px solid transparent;\r\n");
      out.write("		border-right-color: white;\r\n");
      out.write("		border-left: 0;\r\n");
      out.write("		border-top: 0;\r\n");
      out.write("		margin-top: -3.5px;\r\n");
      out.write("		margin-right: -10px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/first/resources/js/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>unicast</h1>\r\n");
      out.write("<h3>네트워크 상에서 클라이언트끼리 1:1 통신하는 방식</h3>\r\n");
      out.write("<p>예를 들어, 카톡, 전화통화, 문자 메세지 등의 통신방식을 말함</p>\r\n");
      out.write("<hr>\r\n");
      out.write("사용할 아이디 : <input type=\"text\" id=\"sender\" size=\"10\"> <br>\r\n");
      out.write("상대방 아이디 : <input type=\"text\" id=\"receiver\" size=\"10\"> <br>\r\n");
      out.write("<button id=\"start\">채팅하기</button>\r\n");
      out.write("<hr>\r\n");
      out.write("<!-- 채팅방 화면 구현하기 -->\r\n");
      out.write("<div style=\"display:none;\" id=\"chatbox\">\r\n");
      out.write("	<fieldset>\r\n");
      out.write("		<div id=\"messageWindow\"></div> <br>\r\n");
      out.write("		<input id=\"inputMessage\" onkeyup=\"enterKey();\">\r\n");
      out.write("		<input type=\"button\" value=\"보내기\" onclick=\"send();\">\r\n");
      out.write("		<input type=\"button\" value=\"나가기\" id=\"endBtn\">\r\n");
      out.write("	</fieldset>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	//상대방과 연결할 웹소켓 객체 준비\r\n");
      out.write("	var webSocket = null;\r\n");
      out.write("	//채팅창 앨리먼트 변수\r\n");
      out.write("	var $textarea = $('#messageWindow');\r\n");
      out.write("	//상대방에게 전송할 메세지 입력 앨리먼트 변수\r\n");
      out.write("	var $inputMessage = $('#inputMessage');\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("		웹소켓 생성 후 사용될 메소드들\r\n");
      out.write("		1. open() : 웹소켓 객체 생성시 실행됨.\r\n");
      out.write("				서버와 연결해 주는 메소드임\r\n");
      out.write("		2. send() : 서버에 메세지 전송하는 메소드임\r\n");
      out.write("		3. message() : 서버에서 데이터를 받는 메소드임\r\n");
      out.write("		4. error() : 서버에 데이터 전송 중 에러 발생시\r\n");
      out.write("				자동 실행되는 메소드임\r\n");
      out.write("		5. close() : 서버와 연결 끊을 때 사용하는 메소드임.\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	function connection(){\r\n");
      out.write("		/*\r\n");
      out.write("		웹소켓 객체는 생성자를 통해 생성됨\r\n");
      out.write("		객체 생성시에 서버와 자동 연결됨.\r\n");
      out.write("		사용되는 프로토콜은 ws:// 임.\r\n");
      out.write("		*/	\r\n");
      out.write("		webSocket = new WebSocket(\r\n");
      out.write("				\"ws://localhost:8080/\" +\r\n");
      out.write("				\"");
      out.print( request.getContextPath() );
      out.write("/unicast\");\r\n");
      out.write("	\r\n");
      out.write("		//웹소켓을 통해서 연결이 될 때 동작할 이벤트핸들러 작성\r\n");
      out.write("		webSocket.onopen = function(event){\r\n");
      out.write("			$textarea.html(\"<p class='chat_content'>\"\r\n");
      out.write("					+ $('#sender').val() + \r\n");
      out.write("					\"님이 입장하셨습니다.</p><br>\");\r\n");
      out.write("			//웹소켓을 통해 채팅서버에 메세지 전송함\r\n");
      out.write("			webSocket.send($('#sender').val() + \r\n");
      out.write("					\"|님이 입장함.\");\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		//서버로 부터 메세지를 받을 때 동작할 이벤트핸들러 작성\r\n");
      out.write("		webSocket.onmessage = function(event){\r\n");
      out.write("			onMessage(event);\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		//서버로 메세지 보낼 때 에러 발생 처리용 이벤트핸들러 작성\r\n");
      out.write("		webSocket.onerror = function(event){\r\n");
      out.write("			onError(event)\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		//서버와 연결을 닫을 때의 이벤트핸들러 작성\r\n");
      out.write("		webSocket.onclose = function(event){\r\n");
      out.write("			onClose(event);\r\n");
      out.write("		};\r\n");
      out.write("	}\r\n");
      out.write("		\r\n");
      out.write("	//보내기 버튼 클릭시 실행되는 send() 함수 작성\r\n");
      out.write("	function send(){\r\n");
      out.write("		//메세지를 입력하지 않고 버튼 누른 경우\r\n");
      out.write("		if($inputMessage.val() == \"\") {\r\n");
      out.write("			alert(\"전송할 메세지를 입력하세요.\");\r\n");
      out.write("		}else{  //메세지가 입력된 경우\r\n");
      out.write("			$textarea.html($textarea.html() + \r\n");
      out.write("				\"<p class='chat_content'>나 : \"\r\n");
      out.write("				+ $inputMessage.val() + \"</p><br>\");\r\n");
      out.write("			webSocket.send($('#sender').val() + \"|\"\r\n");
      out.write("				+ $inputMessage.val());\r\n");
      out.write("			$inputMessage.val('');  //기록된 메세지 삭제함\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//화면이 위로 스크롤되게 처리함\r\n");
      out.write("		$textarea.scrollTop($textarea.height());\r\n");
      out.write("	}  //send()\r\n");
      out.write("	\r\n");
      out.write("	//웹소켓 이벤트핸들러에 의해 실행되는 함수 작성\r\n");
      out.write("	function onMessage(event){\r\n");
      out.write("		//서버로 부터 데이터를 받았을 때 작동되는 함수임\r\n");
      out.write("		var message = event.data.split(\"|\");\r\n");
      out.write("		//보낸사람 아이디\r\n");
      out.write("		var receiverID = message[0];\r\n");
      out.write("		//전송온 메세지\r\n");
      out.write("		var content = message[1];\r\n");
      out.write("		\r\n");
      out.write("		//전송온 메세지가 비었거나, 보낸사람이 내가 연결한\r\n");
      out.write("		//사람이 아닐 경우 아무 내용도 실행하지 않는다.\r\n");
      out.write("		if(content == \"\" || \r\n");
      out.write("				!receiverID.match($('#receiver').val())){\r\n");
      out.write("			//비워 놓음\r\n");
      out.write("		}else{\r\n");
      out.write("			$textarea.html($textarea.html() +\r\n");
      out.write("					\"<p class='chat_content other-side'>\"\r\n");
      out.write("					+ receiverID + \" : \" + content \r\n");
      out.write("					+ \"</p><br>\");\r\n");
      out.write("			//화면이 위로 스크롤되게 처리함\r\n");
      out.write("			$textarea.scrollTop($textarea.height());\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	} //onMessage()\r\n");
      out.write("	\r\n");
      out.write("	function onError(event){\r\n");
      out.write("		alert(event.data);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function onClose(event){\r\n");
      out.write("		alert(event);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//'채팅하기' 버튼 클릭시, 서버와 연결되고 \r\n");
      out.write("	//채팅창이 나타나게 함\r\n");
      out.write("	$('#start').on('click', function(){\r\n");
      out.write("		//채팅창 영역 보이게 함\r\n");
      out.write("		$('#chatbox').css(\"display\", \"block\");\r\n");
      out.write("		//클릭한 버튼은 안 보이게 함\r\n");
      out.write("		$(this).css(\"display\", \"none\");\r\n");
      out.write("		//서버와 연결함\r\n");
      out.write("		connection();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//'나가기' 버튼 클릭시 소켓닫기\r\n");
      out.write("	//채팅창  안 보이게 함\r\n");
      out.write("	$('#endBtn').on('click', function(){\r\n");
      out.write("		//채팅창 안 보이게 함\r\n");
      out.write("		$('#chatbox').css(\"display\", \"none\");\r\n");
      out.write("		//채팅하기 버튼은 다시 보이게 함\r\n");
      out.write("		$('#start').css(\"display\", \"inline\");\r\n");
      out.write("		//서버로 종료 메세지 전송함\r\n");
      out.write("		webSocket.send($('#sender').val() \r\n");
      out.write("				+ \"님이 퇴장하였습니다.\");\r\n");
      out.write("		//소켓닫기\r\n");
      out.write("		webSocket.close();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//전송할 메세지 입력하면서, 키보드 키에서 손뗄때마다\r\n");
      out.write("	//실행되는 이벤트핸들러 함수\r\n");
      out.write("	function enterKey(){\r\n");
      out.write("		//누른 키가 엔터키(Enter) 이면 메세지 전송함\r\n");
      out.write("		if(window.event.keyCode == 13){\r\n");
      out.write("			send();\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
