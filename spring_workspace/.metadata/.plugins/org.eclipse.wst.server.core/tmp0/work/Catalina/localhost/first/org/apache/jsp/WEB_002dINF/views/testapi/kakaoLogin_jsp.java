/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-03-29 05:07:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.testapi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class kakaoLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>first</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("h1 {\r\n");
      out.write("	font-size: 48pt;\r\n");
      out.write("	color: navy;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div {\r\n");
      out.write("	width: 500px;\r\n");
      out.write("	height: 200px;\r\n");
      out.write("	border: 2px solid navy;\r\n");
      out.write("	position: relative;\r\n");
      out.write("	left: 200px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div form {\r\n");
      out.write("	font-size: 16pt;\r\n");
      out.write("	color: navy;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	margin: 10px;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#loginForm form input.pos {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	left: 120px;\r\n");
      out.write("	width: 300px;\r\n");
      out.write("	height: 25px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#loginForm form input[type=submit] {\r\n");
      out.write("	margin: 10px;\r\n");
      out.write("	width: 250px;\r\n");
      out.write("	height: 40px;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	left: 120px;\r\n");
      out.write("	background: navy;\r\n");
      out.write("	color: white;\r\n");
      out.write("	font-size: 16pt;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/first/resources/js/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("<script src=\"/first/resources/js/kakao.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	//발급받은 키 중 javascript키를 사용해준다.\r\n");
      out.write("	Kakao.init('afe6e5daf5dbbaa2d0c424a853366481');\r\n");
      out.write("	console.log(Kakao.isInitialized()); // sdk초기화여부판단\r\n");
      out.write("	//카카오로그인\r\n");
      out.write("	function kakaoLogin() {\r\n");
      out.write("		Kakao.Auth.login({\r\n");
      out.write("			success : function(response) {				\r\n");
      out.write("				Kakao.API.request({\r\n");
      out.write("					url : '/v2/user/me',\r\n");
      out.write("					success : function(response) {\r\n");
      out.write("						console.log(response);\r\n");
      out.write("					},\r\n");
      out.write("					fail : function(error) {\r\n");
      out.write("						console.log(error);\r\n");
      out.write("					},\r\n");
      out.write("				})\r\n");
      out.write("			},\r\n");
      out.write("			fail : function(error) {\r\n");
      out.write("				console.log(error);				\r\n");
      out.write("			},\r\n");
      out.write("		})\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//카카오로그아웃  \r\n");
      out.write("	function kakaoLogout() {\r\n");
      out.write("	    if (Kakao.Auth.getAccessToken()) {\r\n");
      out.write("	      Kakao.API.request({\r\n");
      out.write("	        url: '/v1/user/unlink',\r\n");
      out.write("	        success: function (response) {\r\n");
      out.write("	        	console.log(response);\r\n");
      out.write("	        },\r\n");
      out.write("	        fail: function (error) {\r\n");
      out.write("	          console.log(error);\r\n");
      out.write("	        },\r\n");
      out.write("	      })\r\n");
      out.write("	      Kakao.Auth.setAccessToken(undefined);\r\n");
      out.write("	    }\r\n");
      out.write("	  }  \r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>first 로그인</h1>\r\n");
      out.write("	<div id=\"loginForm\">			\r\n");
      out.write("		<form action=\"login.do\" method=\"post\">\r\n");
      out.write("			<label>아이디 : <input type=\"text\" name=\"userid\" id=\"uid\"\r\n");
      out.write("				class=\"pos\"></label> <br> <label>암 호 : <input\r\n");
      out.write("				type=\"password\" name=\"userpwd\" id=\"upwd\" class=\"pos\"></label> <br>\r\n");
      out.write("			<input type=\"submit\" value=\"로그인\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<center>	\r\n");
      out.write("		<H4>이미지 클릭시 전송온 토큰과 정보 확인</H4>	\r\n");
      out.write("		<img src=\"/first/resources/images/kakao_login.png\" \r\n");
      out.write("		onclick=\"kakaoLogin();\"> <br>\r\n");
      out.write("		<button onclick=\"kakaoLogout();\">카카오 로그아웃</button>\r\n");
      out.write("	</center>\r\n");
      out.write("	<center>	\r\n");
      out.write("	<H4>등록된 카카오계정으로 로그인 서블릿으로 연결 처리</H4>\r\n");
      out.write("	<h6>카카오 개발자 사이트 계정관리에서 로그아웃하면, 카카오 로그인 폼이 나타남</h6>\r\n");
      out.write("	<a href=\"https://kauth.kakao.com/oauth/authorize?client_id=afe6e5daf5dbbaa2d0c424a853366481&redirect_uri=http://localhost:8080/first/kakao_login.do&response_type=code\">	\r\n");
      out.write("		<img src=\"/first/resources/images/kakao_login.png\">\r\n");
      out.write("	</a> \r\n");
      out.write("	</center>\r\n");
      out.write("	<center>	\r\n");
      out.write("	<H4>다른 계정으로 로그인 서블릿으로 연결 처리</H4>\r\n");
      out.write("	<h6>카카오 로그인 폼이 나타남</h6>\r\n");
      out.write("	<!-- 포트번호, context-root명, 서블릿 url-mapping, 자바스크립트 앱 키 변경 필요함 -->\r\n");
      out.write("	<a href=\"https://accounts.kakao.com/login?continue=https://kauth.kakao.com/oauth/authorize&response_type=code&redirect_uri=http://localhost:8080/first/kakao_login.do&client_id=afe6e5daf5dbbaa2d0c424a853366481\">	\r\n");
      out.write("		<img src=\"/first/resources/images/kakao_login.png\">\r\n");
      out.write("	</a> \r\n");
      out.write("	</center>\r\n");
      out.write("<hr>\r\n");
      out.write("<a href=\"https://developers.kakao.com/docs/latest/ko/kakaologin/common\">\r\n");
      out.write("카카오 로그인 설명 페이지로 이동</a>\r\n");
      out.write("<br>\r\n");
      out.write("<p>\r\n");
      out.write("실행 흐름 : <br>\r\n");
      out.write("카카오 로그인 이미지 클릭 \r\n");
      out.write("&gt; 사이트에서 카카오 로그인 창 보여짐\r\n");
      out.write("&gt; 클라이언트가 로그인 정보 입력  \r\n");
      out.write("&gt; 로그인 요청  \r\n");
      out.write("&gt; 동의 항목 체크  \r\n");
      out.write("&gt; 카카오 API 서버로 넘겨짐  \r\n");
      out.write("&gt; 카카오 서버는 전달받은 데이터 식별하고 클라이언트에게 토큰 발급\r\n");
      out.write("&gt; 발급된 토큰을 활용하여 로그인 코드 작성함\r\n");
      out.write("</p>\r\n");
      out.write("<HR>\r\n");
      out.write("<P>\r\n");
      out.write("애플리케이션 설정 : <BR>\r\n");
      out.write("1. 회원가입 : https://developers.kakao.com/<br>\r\n");
      out.write("2. 내 애플리케이션 &gt; 애플리케이션 추가하기 (임의대로 작성) \r\n");
      out.write("&gt; 저장 <br>\r\n");
      out.write("3. 작성된 앱 클릭 &gt; 플랫폼 클릭 &gt; url 등록 \r\n");
      out.write("(http://localhost:포트번호) <br>\r\n");
      out.write("4. url 등록 후 Redirect URI 등록 : 등록하러 가기 (필수: 등록해야 사용할 수 있음)\r\n");
      out.write("<br> 활성화 설정 ON 으로 바꿈<BR>\r\n");
      out.write("* redirect uri : http://localhost:포트번호/context-root명/로그인-url-mapping\r\n");
      out.write("<br>\r\n");
      out.write("에를 들면, http://localhost:8080/first/login<br>\r\n");
      out.write("http://localhost:8080/first/logout\r\n");
      out.write("<br>\r\n");
      out.write("로그아웃용 uri 도 등록함 : <br>\r\n");
      out.write("redirect uri : http://localhost:포트번호/context-root명/로그아웃-url-mapping\r\n");
      out.write("5. (선택사항)제품설정 &gt; 동의항목 \r\n");
      out.write("&gt; 필요한 동의항목 설정함 (컨트롤러로 전달되는 값이 됨.)<BR>\r\n");
      out.write("6. 앱키에서 JavaScript 키를 복사함 <br>\r\n");
      out.write("<br>\r\n");
      out.write("7. 뷰 페이지 작성 : 카카오 로그인 버튼 만들기<br>\r\n");
      out.write("8. 자바스크립트용 : 사용할 카카오 로그인용 자바스크립트 소스 추가함 <br>\r\n");
      out.write("cdn방식 : https://developers.kakao.com/sdk/js/kakao.js<br>\r\n");
      out.write("sdk 다운받기 : https://developers.kakao.com/docs/latest/ko/sdk-download/js <br>\r\n");
      out.write("src=\"/first/resources/js/kakao.min.js\" 로 javascript 태그 작성함<br>\r\n");
      out.write("<br>\r\n");
      out.write("서버측 컨트롤러로 연결 요청시 : <br>\r\n");
      out.write("버튼 또는 이미지 클릭시 설정 url 은 아래와 같이 작성함 <br>\r\n");
      out.write("https://kauth.kakao.com/oauth/authorize?\r\n");
      out.write("client_id=자바스크립트앱키&\r\n");
      out.write("redirect_uri=등록된 로그인용 redirect uri 입력\r\n");
      out.write("&response_type=code <br>\r\n");
      out.write("9. 로그아웃 컨트롤러 연결시 : <br>\r\n");
      out.write("https://kauth.kakao.com/oauth/authorize?\r\n");
      out.write("client_id=자바스크립트앱키&\r\n");
      out.write("redirect_uri=등록된 로그아웃용 redirect uri 입력\r\n");
      out.write("&response_type=code\r\n");
      out.write("</P>	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
