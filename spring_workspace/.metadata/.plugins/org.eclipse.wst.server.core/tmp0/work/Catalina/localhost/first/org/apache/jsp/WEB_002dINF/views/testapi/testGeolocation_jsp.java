/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-03-28 04:12:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.testapi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testGeolocation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>testGeolocation</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/first/resources/js/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/first/resources/js/modernizr-custom.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<p id=\"comment\">Geolocation 지원 여부 확인</p>\r\n");
      out.write("<button id=\"btnGeolocation\">Geolocation 지원여부 확인</button>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function(){\r\n");
      out.write("		//$('#btnGeolocation').on('click', supportGeolocation);\r\n");
      out.write("		$('#btnGeolocation').on('click', supportGeolocationByModernizr);\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//지원여부 확인\r\n");
      out.write("	function supportGeolocation(){\r\n");
      out.write("		//alert(window.navigator.geolocation);\r\n");
      out.write("		//true / false 의 결과를 원할 경우\r\n");
      out.write("		alert(!!window.navigator.geolocation);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function supportGeolocationByModernizr(){\r\n");
      out.write("		alert(Modernizr.geolocation);\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<hr>\r\n");
      out.write("<p id=\"comment2\">경/위도좌표로 위치정보 조회</p>\r\n");
      out.write("<button id=\"btnPosition\">위치정보 확인</button>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	//options 설정\r\n");
      out.write("	var options = {\r\n");
      out.write("			enablehighAccuracy : true,\r\n");
      out.write("			maximumAge : 6000,\r\n");
      out.write("			//항상 캐싱된 위치를 얻고자 할 때는 infinity 로 지정함\r\n");
      out.write("			timeout : 45000\r\n");
      out.write("	};\r\n");
      out.write("	var watcher = null;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	$(function(){\r\n");
      out.write("		$('#btnPosition').on('click', showPosition);		\r\n");
      out.write("	});  //document ready\r\n");
      out.write("	\r\n");
      out.write("	function showPosition(){\r\n");
      out.write("		if(window.navigator.geolocation){\r\n");
      out.write("			//navigator.geolocation.getCurrentPosition(successCallback[, errorCallback[, options]]);\r\n");
      out.write("			//navigator.geolocation.getCurrentPosition(getPosition);\r\n");
      out.write("			\r\n");
      out.write("			//움직이는 위치에 대해 계속 새 위치로 갱신하고자 할 때\r\n");
      out.write("			watcher = navigator.geolocation.watchPosition(getPosition, handleError, options);\r\n");
      out.write("		}else{\r\n");
      out.write("			alert(\"이 브라우저에서는 Geolocation 기능이 지원되지 않습니다.\");\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//success callback 함수 : 위치 요청이 성공했을 때 실행됨\r\n");
      out.write("	//위치 요청에 대해 위치값이 리턴되었을 때 실행됨\r\n");
      out.write("	//리턴된 위치값을 받아야 함 : 메개변수가 필요함\r\n");
      out.write("	function getPosition(position){\r\n");
      out.write("		//매개변수 position 이 요청된 위치값을 받음.\r\n");
      out.write("		$('#comment2').html(\"위도 : \" + position.coords.latitude \r\n");
      out.write("				+ \"<br>경도 : \" + position.coords.longitude);\r\n");
      out.write("	\r\n");
      out.write("		//새 위치에 대한 갱신을 취소\r\n");
      out.write("		navigator.geolocation.clearWatch(watcher);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//error callback 함수 : 정해진 시간 안에 위치정보가 리턴되지 않았을 때 실행됨.\r\n");
      out.write("	function handleError(error){\r\n");
      out.write("		//에러 처리\r\n");
      out.write("		//alert(\"Error : \" + error.code + \", \" + error.message);\r\n");
      out.write("		//alert(error);\r\n");
      out.write("		\r\n");
      out.write("		//error code\r\n");
      out.write("		//code 1 : 사용자가 위치정보에 대한 접근을 막은 경우\r\n");
      out.write("		if(error.code == error.PERMISSION_DENIED){\r\n");
      out.write("			alert(\"사용자가 위치정보에 대한 접근을 막았음.\");\r\n");
      out.write("		}\r\n");
      out.write("		//code 2 : 네트워크 또는 GPS 에 연결할 수 없는 경우\r\n");
      out.write("		else if(error.code == error.POSITION_UNAVAILABLE){\r\n");
      out.write("			alert(\"인터넷 네트워크 또는 GPS 에 연결할 수 없음.\");\r\n");
      out.write("		}\r\n");
      out.write("		//code 3 : 사용자의 위치정보를 계산하는 데 시간이 초과된 경우\r\n");
      out.write("		else if(error.code == error.TIMEOUT){\r\n");
      out.write("			alert(\"위치정보 계산에 시간이 초과됨.\");\r\n");
      out.write("		}\r\n");
      out.write("		//code 4 : 그외 알 수 없는 문제가 생긴 경우\r\n");
      out.write("		else if(error.code == error.UNKNOW_ERROR){\r\n");
      out.write("			alert(\"알 수 없는 오류 발생됨.\")\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
