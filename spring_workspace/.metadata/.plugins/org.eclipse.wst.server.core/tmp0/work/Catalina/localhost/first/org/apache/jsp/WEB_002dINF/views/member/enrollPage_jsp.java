/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-04-07 09:21:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class enrollPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1710467486229L));
    _jspx_dependants.put("jar:file:/D:/spring_workspace/first/src/main/webapp/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>first</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("table th {\r\n");
      out.write("	background-color: #9ff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table#outer {\r\n");
      out.write("	border: 2px solid navy;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.servletContext.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("//전송 보내기 전에 입력값들 유효한 값인지 확인용 함수\r\n");
      out.write("function validate(){\r\n");
      out.write("	\r\n");
      out.write("	//암호와 암호확인이 일치하지 않는지 확인\r\n");
      out.write("	//var pwdValue = document.getElementById(\"userpwd\").value;\r\n");
      out.write("	//var pwdValue2 = document.getElementById(\"userpwd2\").value;\r\n");
      out.write("	//jQuery 선택자 사용으로 바꾼다면\r\n");
      out.write("	var pwdValue = $('#userpwd').val();\r\n");
      out.write("	var pwdValue2 = $('#userpwd2').val();\r\n");
      out.write("	\r\n");
      out.write("	if(pwdValue !== pwdValue2){\r\n");
      out.write("		alert(\"암호와 암호확인이 일치하지 않습니다. 다시 입력하세요.\");\r\n");
      out.write("		document.getElementById(\"userpwd2\").value = \"\";\r\n");
      out.write("		document.getElementById(\"userpwd\").select();\r\n");
      out.write("		return false;  //전송 취소함\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//아이디의 값 형식이 요구한 대로 작성되었는지 검사\r\n");
      out.write("	//암호의 값 형식이 요구한 대로 작성되었는지 검사\r\n");
      out.write("	//정규표현식(Regular Expression) 사용함\r\n");
      out.write("	\r\n");
      out.write("	return true;  //전송보냄\r\n");
      out.write("}\r\n");
      out.write("function dupIDCheck(){\r\n");
      out.write("	//사용 가능한 아이디인지 확인하는 함수 : ajax 기술 사용해야 함\r\n");
      out.write("	\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url: \"idchk.do\",\r\n");
      out.write("		type: \"post\",\r\n");
      out.write("		data: { userid: $('#userid').val() },\r\n");
      out.write("		success: function(data){\r\n");
      out.write("			console.log(\"success : \" + data);\r\n");
      out.write("			if(data == \"ok\"){\r\n");
      out.write("				alert(\"사용 가능한 아이디입니다.\");\r\n");
      out.write("				$('#userpwd').focus();\r\n");
      out.write("			}else{\r\n");
      out.write("				alert(\"이미 사용중인 아이디입니다.\");\r\n");
      out.write("				$('#userid').select();\r\n");
      out.write("			}\r\n");
      out.write("		},\r\n");
      out.write("		error: function(jqXHR, textStatus, errorThrown){\r\n");
      out.write("			console.log(\"error : \" + jqXHR + \", \" + textStatus + \", \" + errorThrown);\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	return false;  //버튼 클릭이벤트 취소 (submit 버튼에 클릭이벤트 전달을 막기 위함)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("window.onload = function(){\r\n");
      out.write("	//선택한 사진파일 이미지 미리보기 처리\r\n");
      out.write("	var photofile = document.getElementById(\"photofile\");\r\n");
      out.write("	photofile.addEventListener('change', function(event){		\r\n");
      out.write("		const files = event.currentTarget.files;\r\n");
      out.write("	    const file = files[0];\r\n");
      out.write("	    const myphoto = document.getElementById(\"photo\");	    \r\n");
      out.write("	    console.log(file.name);\r\n");
      out.write("	    \r\n");
      out.write("	    const reader = new FileReader();\r\n");
      out.write("        reader.onload = (e) => {          \r\n");
      out.write("          myphoto.setAttribute('src', e.target.result);\r\n");
      out.write("          myphoto.setAttribute('data-file', file.name);\r\n");
      out.write("        };\r\n");
      out.write("        reader.readAsDataURL(file);    \r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1 align=\"center\">회원 가입 페이지</h1>\r\n");
      out.write("	<br>\r\n");
      out.write("	<!-- 사진파일 첨부시 enctype=\"multipart/form-data\" 속성 추가함 -->\r\n");
      out.write("	<form action=\"enroll.do\" id=\"enrollForm\" method=\"post\" onsubmit=\"return validate();x`\">\r\n");
      out.write("		<table id=\"outer\" align=\"center\" width=\"700\" cellspacing=\"5\" cellpadding=\"0\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th colspan=\"3\">회원 정보를 입력해 주세요. (* 표시는 필수입력 항목입니다.)</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th width=\"120\">*아이디</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"userId\" id=\"userid\" required> &nbsp; <input type=\"button\" value=\"중복체크\" onclick=\"return dupIDCheck();\"></td>\r\n");
      out.write("				<td rowspan=\"7\" width=\"180\" align=\"center\" valign=\"middle\">\r\n");
      out.write("					<div id=\"myphoto\" style=\"margin: 0; width: 150px; height: 160px; padding: 0; border: 1px solid navy;\">\r\n");
      out.write("						<img src=\"/first/resources/images/channels4_profile.jpg\" id=\"photo\" style=\"width: 150px; height: 160px; border: 1px solid navy; display: block;\" alt=\"사진을 드래그 드롭하세요.\" style=\"padding:0;margin:0;\"><br>\r\n");
      out.write("					</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>*암호</th>\r\n");
      out.write("				<td><input type=\"password\" name=\"userPwd\" id=\"userpwd\" required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>*암호확인</th>\r\n");
      out.write("				<td><input type=\"password\" id=\"userpwd2\" required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>*이름</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"userName\" required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>*성별</th>\r\n");
      out.write("				<td><input type=\"radio\" name=\"gender\" value=\"M\"> 남자 &nbsp; <input type=\"radio\" name=\"gender\" value=\"F\"> 여자</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>*나이</th>\r\n");
      out.write("				<td><input type=\"number\" name=\"age\" min=\"19\" value=\"20\" required></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>*전화번호</th>\r\n");
      out.write("				<td><input type=\"tel\" name=\"phone\" required></td>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>*이메일</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"email\" name=\"email\" required>\r\n");
      out.write("				</td>\r\n");
      out.write("				<td align=\"right\">\r\n");
      out.write("					<input type=\"file\" name=\"photofile\" id=\"photofile\" value=\"\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>취미(연습용)</th>\r\n");
      out.write("				<td colspan=\"2\">\r\n");
      out.write("					<table width=\"350\">\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"game\"> 게임</td>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"reading\"> 독서</td>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"climb\"> 등산</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"sport\"> 운동</td>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"music\"> 음악</td>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"movie\"> 영화</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"travel\"> 여행</td>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"gook\"> 요리</td>\r\n");
      out.write("							<td><input type=\"checkbox\" name=\"hobby\" value=\"etc\" checked> 기타</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("					</table>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>기타 정보(연습용)</th>\r\n");
      out.write("				<td colspan=\"2\"><textarea name=\"etc\" rows=\"3\" cols=\"50\"></textarea></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th colspan=\"3\"><input type=\"submit\" value=\"가입하기\"> &nbsp; \r\n");
      out.write("				<input type=\"reset\" value=\"작성취소\"> &nbsp; \r\n");
      out.write("				<a href=\"main.do\">시작페이지로 이동</a></th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fimport_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fimport_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:import
    org.apache.taglibs.standard.tag.rt.core.ImportTag _jspx_th_c_005fimport_005f0 = (org.apache.taglibs.standard.tag.rt.core.ImportTag) _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.ImportTag.class);
    boolean _jspx_th_c_005fimport_005f0_reused = false;
    try {
      _jspx_th_c_005fimport_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fimport_005f0.setParent(null);
      // /WEB-INF/views/member/enrollPage.jsp(172,0) name = url type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fimport_005f0.setUrl("/WEB-INF/views/common/footer.jsp");
      int[] _jspx_push_body_count_c_005fimport_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fimport_005f0 = _jspx_th_c_005fimport_005f0.doStartTag();
        if (_jspx_th_c_005fimport_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fimport_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fimport_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fimport_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.reuse(_jspx_th_c_005fimport_005f0);
      _jspx_th_c_005fimport_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fimport_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fimport_005f0_reused);
    }
    return false;
  }
}
