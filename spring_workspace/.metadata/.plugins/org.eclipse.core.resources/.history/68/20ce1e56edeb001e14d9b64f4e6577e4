package org.myweb.first.test.controller;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.http.HttpServletResponse;

import org.myweb.first.notice.model.service.NoticeService;
import org.myweb.first.notice.model.vo.Notice;
import org.myweb.first.test.model.service.TestService;
import org.myweb.first.test.model.vo.TestVO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class TestController {
	// 이 컨트롤러 메소드들이 잘 구동되는지, 값이 잘 전달 또는 리턴되었는지 확인하기 위한 로그 객체 생성
	private static Logger logger = LoggerFactory.getLogger(TestController.class);
	
	@Autowired
	private TestService testService;
	
	@Autowired
	private NoticeService noticeService;
	
	// 뷰 페이지 이동 처리용 --------------------------------------
	
	@RequestMapping("moveAjax.do")
	public String moveAjaxPage() {
		return "test/testAjaxView";
	}
	
	// *************************************************
	// ajax 요청 처리용 메소드 작성부 -----------------------------------
	// Asynchronous Javascript And Xml
	// 자바스크립트와 xml 을 이용한 비동기식 네트워크 방식 : 별도의 입출력 스트림을 가짐
	@RequestMapping("test1.do")
	// @ResponseBody  // 문자값 하나 리턴시에는 생략해도 됨
	public void test1Method(HttpServletResponse response) throws IOException {
		// 서비스 메소드 호출하고 결과받기 : 생략
		
				// 클라이언트로 내보낼 출력스트림 생성
				// 문자값 전송시에는 mimiType 설정 생략해도 됨
				// response.setContentType("text/html; charset=utf-8");
				PrintWriter out = response.getWriter();
				
				out.append("served at : /first");
				out.flush();
				out.close();
	}
	
	@RequestMapping(value="test2.do", method=RequestMethod.POST	)
	// @ResponseBody // 문자열 하나 리턴시에는 생략해도 됨
	public void test2Method(TestVO vo, HttpServletResponse response) throws IOException {
		// 서비스 메소드 호출하고 결과받기 : 생략
		logger.info(vo.toString());
		int result = testService.selectTestVO(vo);
		
		// 클라이언트로 내보낼 출력스트림 생성
		// 문자값 전송시에는 mimiType 설정 생략해도 됨
		// response.setContentType("text/html; charset=utf-8");
		PrintWriter out = response.getWriter();
		
		if(result == 1) {
			out.append("ok");
		} else {
			out.append("no member");
		}
		out.flush();
		out.close();
	}
	
	@RequestMapping(value="test3.do", method=RequestMethod.POST)
	@ResponseBody // 리턴하는 jsonString을 response body에 담아서 보낸다는 의미임
	public String test3Method(HttpServletResponse response) {
		// 클라이언트로부터 요청이 오면, jsonString 을 별도의 스트림을 열어서 보낼수도 있고,
		// 또는 뷰리졸버로 리턴하면 등록된 jsonView 가 받아서 내보낼 수도 있음
		
		// Service 메소드 호출하고 결과받기 
		// 최근 등록한 공지글 1개 조회해 옴
		Notice notice = noticeService.selectLast();
		
		
		
	}
	
}









